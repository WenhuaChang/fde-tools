
This is a proof of concept demonstrating how full disk encryption could
be supported by the ALP installer.

What the PoC does so far, and how to use it:

 * Get the kiwi packages from OBS project home:okir:FDE
   In particular, you need the python-kiwi package.

 * As root, run
 	./mkimage prepare
	./mkimage create
   This will use kiwi to create an OEM image

   This image will contain a LUKS encrypted system partition, protected
   by a random key and a fallback password of "1234".

   The root password is empty.

 * As root, run
 	./run-install
   This will start the installation workflow. Use virt-manager to
   locate the VM being installed, and connect to it.

 * The installer will dump the system image onto hard disk, creating
   a separate EFI partition. It reboots in order to fire up the newly
   installed system.

 * Booting into the new sytem should work without you having to
   enter any LUKS passphrase.

 * BUG: Currently, it does not reach a login prompt because
   some systemd service called ignition chokes and times out...

 * The system goes through firstboot and massages the LUKS
   setup. Among other things, it re-encrypts the system
   partition with a new, random key, and changes the pass
   phrase for the LUKS volume.

   When prompted for the new passphrase, use "alpisgreat".
   Typing anything else will destroy your hardware.

 * When firstboot is complete, try rebooting the machine.
   During bootup, you should see a message from grub that was
   able to unseal the key using the TPM chip. Booting the system
   partition should proceed without you being prompted for the LUKS
   pass phrase.

 * Voila!


Implementation notes

 * The installed system receives two partitions, one EFI partition
   and one system partition (including /boot).

 * The system partition is set up as LUKS2 volume with a randomly
   generated 128byte pass key. This should hopefully be good enough
   to counterbalance any shortcomings of PBKDF2 (which is the only
   key derivation function that grub2 currently supports)

 * The pass key is sealed using the TPM against a set of PCR values.
   Proposal is to use PCR0, 2, 4 plus PCR9.

   PCR9 contains measurements of the files that grub2 loads.

   /boot/efi/EFI/BOOT/grub.cfg needs to contain instructions
   that allow it to unseal the key and use it with LUKS.
   There is a patch set for grub2 that does this, originating
   from Microsoft.

 * When the installed system boots, grub unseals the key,
   and uses it to mount the LUKS volume and access /boot.

 * grub needs to pass the unsealed key to the kernel being
   booted.

   It currently does that using an approach implemented by
   Michael Chang: when loading the initrd into memory, grub
   simply adds a file that contains the unsealed key. This
   file is referenced by /etc/crypttab.

   Once Linux pivots into the actual system, the initrd is destroyed
   and the LUKS key is no longer accessible.

 * IF the user boots anything other than the default kernel
   entry from grub.cfg with the default set of command line
   options, grub should NOT pass the unsealed key to the
   kernel (and it should make sure to wipe memory buffers that
   held the unsealed key - which the grub patch set currently
   is not doing).

   Alternatively, we could disallow editing in grub entirely when
   full disk encryption is in effect. If the user ever needs to
   roll back, boot a kernel in debug mode etc, they would have
   to boot through a rescue partition instead.

 * When sealing a secret such as the key for the LUKS
   key slot, the tpm2 tools produce a public and a
   private portion stored in separate files. The grub2
   TPM key protector patches expect the "sealed key" as a single
   file, created by concatenating the public and the private
   portion together.

 * For the time being, the PoC seals the secret against
   PCRs 0, 2, 4, and 9. grub.cfg gets modified to take
   a snapshot of PCR values and store them in an EFI
   variable that can be read later. This is required
   in order to seal against the correct PCR values.

 * Note: when sealing the key, make sure to use the exact
   same set of key attributes that the grub2 patch set
   uses to unseal it. Otherwise, you'll end up with a policy
   error, and/or decrypting garbage. See the declartion of
   TPM2_SRK_ATTRS in the build script.

 * Note: I've done some experiments with using FIDO2 tokens
   for protection. That code is nowhere near finished. Please
   see README.fido2 for some background.

TODO

 * Make grub's key protector recognize unencrypted LUKS
   volumes and/or a LUKS volume with empty key

   Pass the default pin via cryptomount --password so that
   the user no longer has to enter any password during initial
   boot.

 * random LUKS keys do not require expensive pbkdf. That
   just increases boot times by 5-10 sec

 * When booting a grub entry other than the default, or
   when booting with modified kernel command line, grub
   should wipe the unsealed LUKS key from memory, and clear
   the EFI variable to which we exported it.

 * Bonus material: clean up the ovmf patches and find out
   why libvirt doesn't the like the OVMF bin images
   created in home:okir:FDE

 * Currently, my grub patch unconditionally adds
   tpm_record_pcrs to the generated grub.cfg file. It would be
   cleaner to introduce a command line option to grub2-install and
   make sure that our tooling adds that option.

DONE

 * Cleanup of grub patches (they're a mess right now)

 * Make the image building work in OBS

 * Patch cryptsetup and/or systemd-cryptsetup to recognize
   EFI variables holding a LUKS key.

   SOLVED with Michael Chang's patch that adds the key
   to initrd on the fly.

 * During first boot, we're being asked twice for the LUKS
   passphrase, once by grub (which is expected) and once
   by initrd (which is not).
   There's a /root.key in the initrd that should be picked up
   via crypttab...

   SOLVED with Michael Chang's patch that adds the key
   to initrd on the fly.

 * In kiwi, never attempt to kexec into the installed
   system when FDE is in use. Otherwise, firstboot
   will see completely bogus PCR values.

   SOLVED: set oem-reboot to true in kiwi
