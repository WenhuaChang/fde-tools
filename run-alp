#!/bin/bash
#
# This script starts up a VM using an ALP KVM image
#
# Written by okir@suse.com
#

ALP_IMG_URL=https://download.opensuse.org/repositories/home:/okir:/FDE/images/ALP-VM.x86_64-kvm.qcow2

# As long as ALP uses its own buildcert to sign Secure Boot related code,
# KVM needs a special set of SB variables:
UEFI_ALP_VARS_FILE="/usr/share/qemu/ovmf-x86_64-smm-alp-vars.bin"

DEFAULT_IMG_CACHE="$HOME/Downloads"
DEFAULT_VM_NAME="alp-demo"

# This is not true, but allows this demo to run on 15.3 upwards
ALP_OS_VARIANT=opensuse15.3

function usage {

	exitval=$1

	cat <<EOF
run-alp [-N vm-name] [-C cache-dir] [img-path]"
  -N vm-name
        name of the VM to create [default $DEFAULT_VM_NAME]
  -C cache-dir
        specify a directory to hold ALP images [default $DEFAULT_IMG_CACHE]
  -f    if a VM of the given name was created previously, remove it
        without asking for confirmation.

img-path can be used to specify the name of an image to run.
By default, the script will try to run the current ALP-VM image from the
SUSE Open Build Service.

EOF

	exit $exitval
}

opt_vm_name="$DEFAULT_VM_NAME"
opt_cache_dir="$DEFAULT_IMG_CACHE"
opt_force=false

set -- $(getopt C:N:fh "$@")
while [ $# -gt 0 ]; do
	opt=$1; shift
	case $opt in
	-C)	opt_cache_dir=$1; shift;;
	-N)	opt_vm_name=$1; shift;;
	-f)	opt_force=true;;
	-h)	usage 0;;
	--)	break;;
	*)	echo "Unsupported option $opt" >&2
		usage 1;;
	esac
done

case $(stat -f "$opt_cache_dir" -c %T) in
nfs|nfs4|cifs)
	cat >&2 <<-EOF

	Warning: your image cache is on a remote file system. Consider specifying an
	alternative location using the -C option.

EOF
	: ;;
esac

ALP_IMG_LOCAL="$opt_cache_dir/$(basename $ALP_IMG_URL)"

case $# in
0)	if [ ! -s $ALP_IMG_LOCAL ]; then
		echo "Downloading ALP image from $ALP_IMG_URL"
		echo "to $ALP_IMG_LOCAL"
		wget -N -O $ALP_IMG_LOCAL $ALP_IMG_URL
	else
		echo "Using cached ALP image $ALP_IMG_LOCAL"
	fi;;
1)	ALP_IMG_LOCAL=$1; shift;;
*)	echo "Too many arguments" >&2
	usage 1;;
esac

# For as long as the packages in SUSE:ALP aren't signed with a recognized key,
# we need this:
UEFI_CODE_FILE="/usr/share/qemu/ovmf-x86_64-smm-opensuse-code.bin"
UEFI_VARS_FILE="/usr/share/qemu/ovmf-x86_64-smm-opensuse-vars.bin"
if [ -s "$UEFI_ALP_VARS_FILE" ]; then
	echo "Using UEFI variables image $UEFI_ALP_VARS_FILE" >&2
	UEFI_VARS_FILE="$UEFI_ALP_VARS_FILE"
fi


function user_confirm {

	msg="$1"
	while true; do
		echo -n "$msg [y/N]: "
		read word
		case $word in
		[yY])
			return 0;;
		""|[nN])
			return 1;;
		esac
	done
}

function cleanup_domain {

	local vm_name=$1

	virsh dominfo "$vm_name" >/dev/null 2>&1 || return 0

	echo
	echo "A domain named $vm_name already exists"
	virsh dominfo "$vm_name"
	virsh domblklist "$vm_name"
	echo

	if ! $opt_force; then
		user_confirm "Destroy this VM and its storage?" || exit 1
	fi

	if virsh dominfo "$vm_name" | grep -qs State.*running; then
		echo "Shutting down $vm_name"
		virsh destroy $vm_name
	fi

	if virsh dominfo "$vm_name" >/dev/null 2>&1; then
		echo "Destroying $vm_name and associated storage"
		virsh undefine --nvram --remove-all-storage $vm_name
	fi

	# Instead of --remove-all-storage:
	# virsh vol-delete --pool default $vm_name.qcow2
	return 0
}

function install_from_disk {

	local vm_name=$1
	local golden_image=$2

	suffix=${golden_image//*.}

	local image="$opt_cache_dir/$vm_name.$suffix"
	if [ -f "$image" ]; then
		if ! $opt_force; then
			user_confirm "A VM image named $image already exists. Remove?" || exit 1
		fi
		rm -f "$image"
	fi

	cp -v "$golden_image" "$image" || exit 1

	case "$(virsh net-info default | grep -i active)" in
	*yes*) : ;;
	*)
		echo "Starting libvirt network \"default\""
		virsh net-start default;;
	esac

	set -x
	exec virt-install --name $vm_name \
		--os-variant="$ALP_OS_VARIANT" \
		--boot "hd,uefi,loader=$UEFI_CODE_FILE,nvram_template=$UEFI_VARS_FILE" \
		--import \
		--disk $image,bus=sata \
		--memory 2048 \
		--console pty,target_type=virtio \
		--tpm backend.type=emulator,backend.version=2.0,model=tpm-tis \
		--network network=default \
		--autoconsole graphical
}

cleanup_domain $opt_vm_name
install_from_disk $opt_vm_name $ALP_IMG_LOCAL

