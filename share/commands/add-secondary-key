#
#   Copyright (C) 2022, 2023 SUSE LLC
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Written by Olaf Kirch <okir@suse.com>

if [ -z "$FDE_AUTHORIZED_POLICY" -a -z "$opt_keyfile" ]; then
    display_errorbox "Cannot add secondary key: lacking --keyfile option, and no authorized-policy created"
    exit 1
fi

fde_identify_fs_root fsdev

luks_dev=$(luks_get_volume_for_fsdev "$fsdev")
if [ -z "$luks_dev" ]; then
    display_errorbox "Cannot find the underlying partition for $fsdev"
    exit 1
fi

# FIXME: we should look at the output of luksDump to check how many keys
# there are. If the header contains more than a single key (which would be the
# recovery password), maybe we should refuse to add another key.

if [ -n "$opt_password" ]; then
    result_password="$opt_password"
else
    request_password "Please enter LUKS recovery password"
    if [ -z "$result_password" ]; then
	display_errorbox "Unable to obtain recovery password; aborting."
	exit 1
    fi
fi

luks_keyfile=$(luks_write_password pass "${result_password}")

if [ -z "$opt_keyfile" ]; then
    luks_new_keyfile="$(fde_make_tempfile newkey)"
else
    luks_new_keyfile="$opt_keyfile"
fi

if ! luks_add_random_key "${luks_dev}" "${luks_keyfile}" "${luks_new_keyfile}"; then
    display_errorbox "Failed to add secondary LUKS key"
    rm -f "$luks_keyfile" "$luks_new_keyfile"
    exit 1
fi

rm -f "$luks_keyfile"

# When using an authorized policy, we can seal the secondary key against
# this policy right away, without having to pass a copy of the LUKS key
# to the installed system in a file.
# Note that this step does not require any knowledge of PCR values; the actual
# PCR policy is created at a later stage inside the installed system.
if [ -n "$FDE_AUTHORIZED_POLICY" ]; then
    tpm_set_authorized_policy_paths "$FDE_AUTHORIZED_POLICY"
    if ! tpm_seal_secret "$luks_new_keyfile" "ignored" "$FDE_AP_SEALED_SECRET" "$FDE_AP_AUTHPOLICY"; then
	display_errorbox "Failed to seal secondary LUKS key against TPM Authorized Policy"
	rm -f "$luks_new_keyfile"
	exit 1
    fi
fi

if [ -n "$opt_keyfile" ]; then
    echo "Leaving secondary key in $opt_keyfile"
else
    rm -f "$luks_new_keyfile"
fi
