#
#   Copyright (C) 2022, 2023 SUSE LLC
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Written by Olaf Kirch <okir@suse.com>

fde_identify_fs_root fsdev

luks_dev=$(luks_get_volume_for_fsdev "$fsdev")
if [ -z "$luks_dev" ]; then
    display_errorbox "Cannot find the underlying partition for $fsdev"
    exit 1
fi

fde_trace "Testing TPM seal/unseal"
if ! tpm_test $FDE_KEY_SIZE_BYTES; then
    display_errorbox "TPM key sealing and unsealing does not seem to work"
    exit 1
fi
fde_trace "TPM seal/unseal works"

if [ -n "$FDE_AUTHORIZED_POLICY" ]; then
    tpm_set_authorized_policy_paths "$FDE_AUTHORIZED_POLICY"

    # The exact sequence of commands is
    #   fdectl init-authorized-policy
    #   fdectl add-secondary-key
    #   fdectl tpm-enable
    #          ^---- we are here
    #   fdectl tpm-authorize
    if [ ! -f "$FDE_AP_SEALED_SECRET" ]; then
	display_errorbox "Cannot initialize TPM based boot with authorized policy - no sealed key found"
	exit 1
    fi

    # Copy authorized policy and other constant files to the ESP, and
    # tell the boot loader to use these.
    # Eventually, we will bless a specfic configuration by creating a PCR policy
    # and signing it with our RSA key.
    grub_enable_fde_authorized_policy "$FDE_AP_SEALED_SECRET" \
		"$FDE_AP_AUTHPOLICY" "$FDE_AP_PUBLIC_KEY"
    exit $?
fi

if [ -n "$opt_keyfile" ]; then
    luks_keyfile="$opt_keyfile"
    luks_new_keyfile=$(fde_make_tempfile new.key)
    cp "$luks_keyfile" "$luks_new_keyfile"

    # We consider the key compromised, because it resided on disk - even if only
    # for a short amount of time. It may have made its way into a btrfs snapshot,
    # which may hang around forever...
    # So what we do here is generate a new key and replace the key slot with the
    # compromised key with this new key. Note that the new key is created below
    # /dev/shm, which is an in-memory file system.
    if ! luks_set_random_key "$luks_dev" "$luks_new_keyfile"; then
	display_errorbox "Failed to change secondary LUKS key"
	rm -f "$luks_keyfile" "$luks_new_keyfile"
	exit 1
    fi

    rm -f "$luks_keyfile"
else
    request_password "Please enter LUKS recovery password"
    if [ -z "$result_password" ]; then
        display_errorbox "Unable to obtain recovery password; aborting."
        exit 1
    fi

    luks_keyfile=$(luks_write_password pass "${result_password}")
    luks_new_keyfile=$(fde_make_tempfile new.key)

    if ! luks_add_random_key "${luks_dev}" "${luks_keyfile}" "${luks_new_keyfile}"; then
	display_errorbox "Failed to add secondary LUKS key"
	rm -f "$luks_keyfile" "$luks_new_keyfile"
	exit 1
    fi
fi

if ! grub_enable_fde_pcr_policy "${luks_new_keyfile}"; then
    display_errorbox "Failed to protect encrypted volume with TPM"
    rm -f "$luks_keyfile"
    exit 1
fi

rm -f "$luks_new_keyfile"
