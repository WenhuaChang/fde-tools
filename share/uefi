#
#   Copyright (C) 2022 SUSE LLC
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Written by Olaf Kirch <okir@suse.com>


##################################################################
# Helper to read SecureBoot and SetupMode
##################################################################
function get_efivar_binary_byte {

    name="$1"
    path="/sys/firmware/efi/efivars/$name"
    if [ ! -f "$path" ]; then
	echo "n/a"
    else
	# read the EFI variable, skipping over the initial attribute word (32bit)
	dd if="$path" bs=1 skip=4 | tr '\0\1' '01'
    fi
}

##################################################################
# Check if UEFI Secure Boot is enabled
##################################################################
function uefi_secure_boot_enabled {

    if ! [ -d /sys/firmware/efi ]; then
	fde_trace "This system does not seem to use UEFI. Full disk encryption not available"
	return 1
    fi

    secure_boot=$(get_efivar_binary_byte SecureBoot-8be4df61-93ca-11d2-aa0d-00e098032b8c)
    setup_mode=$(get_efivar_binary_byte SetupMode-8be4df61-93ca-11d2-aa0d-00e098032b8c)
    if [ "$secure_boot" != 1 -a "$setup_mode" != 0 ]; then
	fde_trace "Secure Boot not enabled (secure_boot=$secure_boot; setup_mode=$setup_mode)"
	return 1
    fi

    return 0
}

function uefi_get_current_loader {

    entry=$(efibootmgr | grep BootCurrent|awk '{print $2;}')
    if [ -z "$entry" ]; then
	fde_trace "Cannot determine current UEFI boot entry"
	return 1
    fi

    file=$(efibootdump "Boot$entry" | sed 's:.*File(\([^)]*\)).*:\1:' | tr '\\' /)
    if [ -z "$entry" ]; then
	fde_trace "Cannot determine loader path for UEFI boot entry $entry"
	return 1
    fi

    realpath "/boot/efi/$file"
}

